#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2020  The SymbiFlow Authors.
#
# Use of this source code is governed by a ISC-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/ISC
#
# SPDX-License-Identifier: ISC
"""
This file contains a set of functions for encoding PLL and MMCM configuration
for Xilinx Series-7 FPGAs into FASM features.
"""

# =============================================================================


PLL_LOCK_TABLE = [
    # This table is composed of:
    # LockRefDly_LockFBDly_LockCnt_LockSatHigh_UnlockCnt
    "40'b00110_00110_1111101000_1111101001_0000000001",
    "40'b00110_00110_1111101000_1111101001_0000000001",
    "40'b01000_01000_1111101000_1111101001_0000000001",
    "40'b01011_01011_1111101000_1111101001_0000000001",
    "40'b01110_01110_1111101000_1111101001_0000000001",
    "40'b10001_10001_1111101000_1111101001_0000000001",
    "40'b10011_10011_1111101000_1111101001_0000000001",
    "40'b10110_10110_1111101000_1111101001_0000000001",
    "40'b11001_11001_1111101000_1111101001_0000000001",
    "40'b11100_11100_1111101000_1111101001_0000000001",
    "40'b11111_11111_1110000100_1111101001_0000000001",
    "40'b11111_11111_1100111001_1111101001_0000000001",
    "40'b11111_11111_1011101110_1111101001_0000000001",
    "40'b11111_11111_1010111100_1111101001_0000000001",
    "40'b11111_11111_1010001010_1111101001_0000000001",
    "40'b11111_11111_1001110001_1111101001_0000000001",
    "40'b11111_11111_1000111111_1111101001_0000000001",
    "40'b11111_11111_1000100110_1111101001_0000000001",
    "40'b11111_11111_1000001101_1111101001_0000000001",
    "40'b11111_11111_0111110100_1111101001_0000000001",
    "40'b11111_11111_0111011011_1111101001_0000000001",
    "40'b11111_11111_0111000010_1111101001_0000000001",
    "40'b11111_11111_0110101001_1111101001_0000000001",
    "40'b11111_11111_0110010000_1111101001_0000000001",
    "40'b11111_11111_0110010000_1111101001_0000000001",
    "40'b11111_11111_0101110111_1111101001_0000000001",
    "40'b11111_11111_0101011110_1111101001_0000000001",
    "40'b11111_11111_0101011110_1111101001_0000000001",
    "40'b11111_11111_0101000101_1111101001_0000000001",
    "40'b11111_11111_0101000101_1111101001_0000000001",
    "40'b11111_11111_0100101100_1111101001_0000000001",
    "40'b11111_11111_0100101100_1111101001_0000000001",
    "40'b11111_11111_0100101100_1111101001_0000000001",
    "40'b11111_11111_0100010011_1111101001_0000000001",
    "40'b11111_11111_0100010011_1111101001_0000000001",
    "40'b11111_11111_0100010011_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001",
    "40'b11111_11111_0011111010_1111101001_0000000001"
]

PLL_BANDWIDTH_TABLE = {
    "low": [
        # CP_RES_LFHF
        "10'b0010_1111_00",
        "10'b0010_1111_00",
        "10'b0010_0111_00",
        "10'b0010_1101_00",
        "10'b0010_0101_00",
        "10'b0010_0101_00",
        "10'b0010_1001_00",
        "10'b0010_1110_00",
        "10'b0010_1110_00",
        "10'b0010_0001_00",
        "10'b0010_0001_00",
        "10'b0010_0110_00",
        "10'b0010_0110_00",
        "10'b0010_0110_00",
        "10'b0010_0110_00",
        "10'b0010_1010_00",
        "10'b0010_1010_00",
        "10'b0010_1010_00",
        "10'b0010_1010_00",
        "10'b0010_1100_00",
        "10'b0010_1100_00",
        "10'b0010_1100_00",
        "10'b0010_1100_00",
        "10'b0010_1100_00",
        "10'b0010_1100_00",
        "10'b0010_1100_00",
        "10'b0010_1100_00",
        "10'b0010_1100_00",
        "10'b0010_1100_00",
        "10'b0010_1100_00",
        "10'b0010_0010_00",
        "10'b0010_0010_00",
        "10'b0010_0010_00",
        "10'b0010_0010_00",
        "10'b0010_0010_00",
        "10'b0010_0010_00",
        "10'b0010_0010_00",
        "10'b0010_0010_00",
        "10'b0010_0010_00",
        "10'b0010_0010_00",
        "10'b0011_1100_00",
        "10'b0011_1100_00",
        "10'b0011_1100_00",
        "10'b0011_1100_00",
        "10'b0011_1100_00",
        "10'b0011_1100_00",
        "10'b0011_1100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00"
    ],

    "high": [
        # CP_RES_LFHF
        "10'b0011_0111_00",
        "10'b0011_0111_00",
        "10'b0101_1111_00",
        "10'b0111_1111_00",
        "10'b0111_1011_00",
        "10'b1101_0111_00",
        "10'b1110_1011_00",
        "10'b1110_1101_00",
        "10'b1111_1101_00",
        "10'b1111_0111_00",
        "10'b1111_1011_00",
        "10'b1111_1101_00",
        "10'b1111_0011_00",
        "10'b1110_0101_00",
        "10'b1111_0101_00",
        "10'b1111_0101_00",
        "10'b1111_0101_00",
        "10'b1111_0101_00",
        "10'b0111_0110_00",
        "10'b0111_0110_00",
        "10'b0111_0110_00",
        "10'b0111_0110_00",
        "10'b0101_1100_00",
        "10'b0101_1100_00",
        "10'b0101_1100_00",
        "10'b1100_0001_00",
        "10'b1100_0001_00",
        "10'b1100_0001_00",
        "10'b1100_0001_00",
        "10'b1100_0001_00",
        "10'b1100_0001_00",
        "10'b1100_0001_00",
        "10'b1100_0001_00",
        "10'b0100_0010_00",
        "10'b0100_0010_00",
        "10'b0100_0010_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0011_0100_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0100_1100_00",
        "10'b0100_1100_00",
        "10'b0100_1100_00",
        "10'b0100_1100_00",
        "10'b0100_1100_00",
        "10'b0100_1100_00",
        "10'b0100_1100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00"
    ],

    "optimized": [
        # CP_RES_LFHF
        "10'b0011_0111_00",
        "10'b0011_0111_00",
        "10'b0101_1111_00",
        "10'b0111_1111_00",
        "10'b0111_1011_00",
        "10'b1101_0111_00",
        "10'b1110_1011_00",
        "10'b1110_1101_00",
        "10'b1111_1101_00",
        "10'b1111_0111_00",
        "10'b1111_1011_00",
        "10'b1111_1101_00",
        "10'b1111_0011_00",
        "10'b1110_0101_00",
        "10'b1111_0101_00",
        "10'b1111_0101_00",
        "10'b1111_0101_00",
        "10'b1111_0101_00",
        "10'b0111_0110_00",
        "10'b0111_0110_00",
        "10'b0111_0110_00",
        "10'b0111_0110_00",
        "10'b0101_1100_00",
        "10'b0101_1100_00",
        "10'b0101_1100_00",
        "10'b1100_0001_00",
        "10'b1100_0001_00",
        "10'b1100_0001_00",
        "10'b1100_0001_00",
        "10'b1100_0001_00",
        "10'b1100_0001_00",
        "10'b1100_0001_00",
        "10'b1100_0001_00",
        "10'b0100_0010_00",
        "10'b0100_0010_00",
        "10'b0100_0010_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0011_0100_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0010_1000_00",
        "10'b0100_1100_00",
        "10'b0100_1100_00",
        "10'b0100_1100_00",
        "10'b0100_1100_00",
        "10'b0100_1100_00",
        "10'b0100_1100_00",
        "10'b0100_1100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00",
        "10'b0010_0100_00"
    ],
}

# =============================================================================


def compute_pll_lookup(clkfbout_mult, bandwidth):
    """
    Returns values from PLL lookup tables according to its CLKFBOUT_MULT and
    BANDWIDTH parameter. The values are returned as binary strings.
    """

    # Lock table (a.k.a. LKTABLE)
    lktable = PLL_LOCK_TABLE[clkfbout_mult - 1].replace("_", "")
    # Bandwidth control table (a.k.a. TABLE)
    table = PLL_BANDWIDTH_TABLE[bandwidth][clkfbout_mult - 1].replace("_", "")

    return lktable, table
    

def compute_pll_clkregs(divide, duty, phase):
    """
    Returns a string of 0s and 1s with the following layout. Bits are indexed
    starting from LSB.

      CLKREG2: RESERVED[6:0], MX[1:0], EDGE, NO_COUNT, DELAY_TIME[5:0]
      CLKREG1: PHASE_MUX[3:0], RESERVED, HIGH_TIME[5:0], LOW_TIME[5:0]        
    """

    PLL_FRAC_PRECISION = 10

    def round_frac(x, n):
        scale = (1 << PLL_FRAC_PRECISION)
        return int(round(x / scale, n) * scale)

    # Sanity check argument types and values
    assert isinstance(divide, int), type(divide)
    assert divide > 0 and divide <= 128, divide
    assert isinstance(duty, int) or isinstance(duty, float), type(duty)
    assert duty > 0.0 and duty < 1.0, duty
    assert isinstance(phase, int) or isinstance(phase, float), type(phase)
    assert phase > -360.0 and phase < 360.0, phase

    print(divide, duty, phase)

    # Phase shift register fields
    if phase < 0.0:
        phase += 360.0

    phase_fixed = int(phase * (1 << PLL_FRAC_PRECISION))
    phase_in_cycles = round_frac((phase_fixed * divide) // 360, 3)
    print("", phase, phase_fixed, phase_in_cycles)

    phase_mux = (phase_in_cycles >> (PLL_FRAC_PRECISION - 3)) & 0x07
    delay_tim = (phase_in_cycles >> (PLL_FRAC_PRECISION    )) & 0x3F
    print("", "phase_mux: {:03b}".format(phase_mux))
    print("", "delay_tim: {:06b}".format(delay_tim))

    # Divider register fields
    if divide > 1:

        if divide >= 64:
            duty_min = (divide - 64.0) / divide
            duty_max = 64.0 / divide
            duty = max(duty_min, min(duty, duty_max))

        duty_fix = int(duty * (1 << PLL_FRAC_PRECISION))
        temp = round_frac(duty_fix * divide, 1)

        print("{:016b}".format(temp))
        high_time = (temp >>  PLL_FRAC_PRECISION     ) & 0x7F
        w_edge    = (temp >> (PLL_FRAC_PRECISION - 1)) & 0x01

        if high_time == 0:
            high_time = 1
            w_edge = 0

        elif high_time == divide:
            high_time = divide - 1
            w_edge = 1

        low_time = divide - high_time
        no_count = 0

    # No division
    else:
        w_edge = 0
        no_count = 1
        high_time = 1
        low_time = 1

    high_time &= 0x3F
    low_time  &= 0x3F

    print("", "high_time: {:06b}".format(high_time))
    print("", "low_time : {:06b}".format(low_time))
    print("", "w_edge   : {:01b}".format(w_edge))
    print("", "no_count : {:01b}".format(no_count))

    # Assemble the final clock registers content
    clkregs  = low_time
    clkregs |= high_time << 6
    clkregs |= phase_mux << 13

    clkregs |= delay_tim << 16
    clkregs |= no_count << 22
    clkregs |= w_edge << 23
    print("", "clkregs: {:032b}".format(clkregs))

    clkregs = "{:032b}".format(clkregs)[::-1]
    return clkregs


